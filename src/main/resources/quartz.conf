itoa.scheduler {
  noOf {
    instance = 1
  }
  actors {
    name {
      bakjob = "bakjob_actor"
      restorepoll = "restorepoll_actor"
      taskpoll = "taskpoll_actor"
    }
  }
  cron {
    bakjob = "cronBakJob"
    restorepoll = "cronRestorePoll"
    taskpoll = "cronTaskPoll"
  }
}

############################# cron设置说明 #############################
## 格式: * * * * * *
##     秒 分 时 日 月 周 年
## [秒]0-59 [分]0-59 [时]0-23 [日]1-31 [月]1-12 [周]1-7 [年]可省略
##  * 表示所有值. 例如:在分的字段上设置 "*",表示每一分钟都会触发。
##  ? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为"?" 具体设置为 0 0 0 10 * ?
##  - 表示区间。例如 在小时上设置 "10-12",表示 10,11,12点都会触发。
##  , 表示指定多个值，例如在周字段上设置 "MON,WED,FRI" 表示周一，周三和周五触发
##  / 用于递增触发。如在秒上面设置"5/15" 表示从5秒开始，每增15秒触发(5,20,35,50)。在月字段上设置'1/3'所示每月1号开始，每隔三天触发一次。
##  L 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于"7"或"SAT"。如果在"L"前加上数字，则表示该数据的最后一个。例如在周字段上设置"6L"这样的格式,则表示“本月最后一个星期五"
##  W 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置"15W"，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 "1W",它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，"W"前只能设置具体的数字,不允许区间"-").
##
##  小提示
##  'L'和 'W'可以一组合使用。如果在日字段上设置"LW",则表示在本月的最后一个工作日触发(一般指发工资 )
##  序号(表示每月的第几个周几)，例如在周字段上设置"6#3"表示在每月的第三个周六.注意如果指定"#5",正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了)
##  每五分钟执行   0 */5 * * * ?
##  每两小时执行   0 0 */2 * * ?
##  每小时执行     0 0 * * * ?    或者  0 0 */1 * * ?
##  每天执行       0 0 0 */1 * ?
##  每周执行       0 0 0 ? * 1
##  每月执行       0 0 0 1 * ?
##  验证网址 http://cron.qqe2.com/
akka.quartz {
  threadPool {
    threadCount = 5
    threadPriority = 5
    daemonThreads = true
  }
  defaultTimezone = "UTC"
  schedules {
    cronBakJob {
      description = "A cron job that fires off every 15 mins"
      expression = "0 */15 * ? * *"
    }
    cronRestorePoll {
      description = "A cron job that fires off every 5 mins还原作业1 */5 * * * ? *"
      expression = "1 */5 * * * ? *"
    }
    cronTaskPoll {
      description = "A cron job that fires off every 5 mins备份作业1 */5 * * * ? *"
      expression = "1 */5 * * * ? *"
    }
    lastDayOfMonthCreateIndex {
      description = "每个月的最后一天下午6点,用于生成index"
      expression = "1 1 18 L * ? *"
    }
    lastDayOfQuarterCreateIndex {
      description = "每个季度的最后一天下午6点,用于生成index"
      expression = "1 1 18 L 3,6,9,12 ? *"
    }
    lastDayOfYearCreateIndex {
      description = "每年的12月的最后一天的下午6点,用于生成index"
      expression = "1 1 18 L 12 ? *"
    }
    everyDayCreateIndex {
      description = "每天的下午6点,下班时间,用于生成index 1 1 18 * * ? * "
      expression = "1 1 18 * * ? *"
    }
    everyDaySeparateHoldColdData {
      description = "用于分离冷热数据，每天下午6点半执行"
      expression = "1 30 18 * * ? *"
    }
  }
}
// "0 */15 * ? * *"与"0 15 * ? * *"的区别是第一个是每15分钟运行一次,第二个是每小的15分运行一次，时间间隔是1小时
// "1 30 18 * * ? "是每天的下午的6时30分1秒那个时刻运行一次，运行间隔是1天
// "1 1 18 L 12 ? "是每年的12月的最后一天的晚上6点1分1秒的时刻 运行间隔为1年
akka {
  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  //  event-handlers = ["akka.event.Logging$DefaultLogger"]
  # Options: ERROR, WARNING, INFO, DEBUG
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  //  log-config-on-start = on
  loglevel = "INFO"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    maximum-payload-bytes = 30000000 bytes
    netty.tcp {
      hostname = "0.0.0.0"
      port = 0
      message-frame-size = 30000000b
      send-buffer-size = 30000000b
      receive-buffer-size = 30000000b
      maximum-frame-size = 30000000b
    }
  }
  cluster {
    seed-nodes = []
    auto-down-unreachable-after = 3s   //关闭多久后移除
    use-dispatcher = cluster-dispatcher
  }
}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-max = 16
    parallelism-factor = 2.0
  }
  throughput = 100
}

akka.http {
  server {
    idle-timeout = 60 s
    request-timeout = 30 s
    bind-timeout = 5 s
    max-connections = 1024

    parsing {
      max-content-length = infinite
    }
  }

  client {
    connecting-timeout = 5 s
    idle-timeout = 6 s
    parsing {
      max-content-length = infinite
    }
  }
  host-connection-pool {

    idle-timeout = 6 s  //默认为30s，如果池中某个连接持续5秒，没有数据来往，则终结自己

    max-connections = 32 //默认为4

    max-open-requests = 1024 //client side，防止akka.stream.BufferOverflowException异常，异常原因是短时间内向某服务器发起大量请求，而请求无法在一定时间内得到相应因而驻留内存中，造成缓存溢出，需要从编程的角度根治此问题(via akka-stream)

    max-retries = 0 //默认为5，不需要重试
  }
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
}

include "quartz.conf"
include "itoaservice.conf"